/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as DashboardIndexImport } from './routes/_dashboard/index'
import { Route as DashboardSettingsImport } from './routes/_dashboard/settings'
import { Route as DashboardFormsImport } from './routes/_dashboard/forms'
import { Route as DashboardAutomationImport } from './routes/_dashboard/automation'
import { Route as DashboardAnalyticsImport } from './routes/_dashboard/analytics'
import { Route as DashboardLockedLinksIndexImport } from './routes/_dashboard/locked-links/index'
import { Route as DashboardLockedLinksCreateImport } from './routes/_dashboard/locked-links/create'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardFormsRoute = DashboardFormsImport.update({
  id: '/forms',
  path: '/forms',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAutomationRoute = DashboardAutomationImport.update({
  id: '/automation',
  path: '/automation',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAnalyticsRoute = DashboardAnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardLockedLinksIndexRoute = DashboardLockedLinksIndexImport.update({
  id: '/locked-links/',
  path: '/locked-links/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardLockedLinksCreateRoute = DashboardLockedLinksCreateImport.update(
  {
    id: '/locked-links/create',
    path: '/locked-links/create',
    getParentRoute: () => DashboardRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/analytics': {
      id: '/_dashboard/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof DashboardAnalyticsImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/automation': {
      id: '/_dashboard/automation'
      path: '/automation'
      fullPath: '/automation'
      preLoaderRoute: typeof DashboardAutomationImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/forms': {
      id: '/_dashboard/forms'
      path: '/forms'
      fullPath: '/forms'
      preLoaderRoute: typeof DashboardFormsImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/settings': {
      id: '/_dashboard/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/locked-links/create': {
      id: '/_dashboard/locked-links/create'
      path: '/locked-links/create'
      fullPath: '/locked-links/create'
      preLoaderRoute: typeof DashboardLockedLinksCreateImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/locked-links/': {
      id: '/_dashboard/locked-links/'
      path: '/locked-links'
      fullPath: '/locked-links'
      preLoaderRoute: typeof DashboardLockedLinksIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardAnalyticsRoute: typeof DashboardAnalyticsRoute
  DashboardAutomationRoute: typeof DashboardAutomationRoute
  DashboardFormsRoute: typeof DashboardFormsRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardLockedLinksCreateRoute: typeof DashboardLockedLinksCreateRoute
  DashboardLockedLinksIndexRoute: typeof DashboardLockedLinksIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAnalyticsRoute: DashboardAnalyticsRoute,
  DashboardAutomationRoute: DashboardAutomationRoute,
  DashboardFormsRoute: DashboardFormsRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardLockedLinksCreateRoute: DashboardLockedLinksCreateRoute,
  DashboardLockedLinksIndexRoute: DashboardLockedLinksIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardRouteWithChildren
  '/analytics': typeof DashboardAnalyticsRoute
  '/automation': typeof DashboardAutomationRoute
  '/forms': typeof DashboardFormsRoute
  '/settings': typeof DashboardSettingsRoute
  '/': typeof DashboardIndexRoute
  '/locked-links/create': typeof DashboardLockedLinksCreateRoute
  '/locked-links': typeof DashboardLockedLinksIndexRoute
}

export interface FileRoutesByTo {
  '/analytics': typeof DashboardAnalyticsRoute
  '/automation': typeof DashboardAutomationRoute
  '/forms': typeof DashboardFormsRoute
  '/settings': typeof DashboardSettingsRoute
  '/': typeof DashboardIndexRoute
  '/locked-links/create': typeof DashboardLockedLinksCreateRoute
  '/locked-links': typeof DashboardLockedLinksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/analytics': typeof DashboardAnalyticsRoute
  '/_dashboard/automation': typeof DashboardAutomationRoute
  '/_dashboard/forms': typeof DashboardFormsRoute
  '/_dashboard/settings': typeof DashboardSettingsRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/locked-links/create': typeof DashboardLockedLinksCreateRoute
  '/_dashboard/locked-links/': typeof DashboardLockedLinksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/analytics'
    | '/automation'
    | '/forms'
    | '/settings'
    | '/'
    | '/locked-links/create'
    | '/locked-links'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/analytics'
    | '/automation'
    | '/forms'
    | '/settings'
    | '/'
    | '/locked-links/create'
    | '/locked-links'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/analytics'
    | '/_dashboard/automation'
    | '/_dashboard/forms'
    | '/_dashboard/settings'
    | '/_dashboard/'
    | '/_dashboard/locked-links/create'
    | '/_dashboard/locked-links/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/analytics",
        "/_dashboard/automation",
        "/_dashboard/forms",
        "/_dashboard/settings",
        "/_dashboard/",
        "/_dashboard/locked-links/create",
        "/_dashboard/locked-links/"
      ]
    },
    "/_dashboard/analytics": {
      "filePath": "_dashboard/analytics.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/automation": {
      "filePath": "_dashboard/automation.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/forms": {
      "filePath": "_dashboard/forms.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/settings": {
      "filePath": "_dashboard/settings.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/locked-links/create": {
      "filePath": "_dashboard/locked-links/create.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/locked-links/": {
      "filePath": "_dashboard/locked-links/index.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
